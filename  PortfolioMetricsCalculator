import pandas as pd
import numpy as np

# Example: Download historical prices (replace with your own data or use yfinance)
prices = pd.DataFrame({
    'AAPL': [150, 152, 151, 153, 155],
    'GOOGL': [2500, 2510, 2505, 2520, 2530],
    'MSFT': [300, 305, 303, 307, 310]
})

# Calculate daily returns
daily_returns = prices.pct_change().dropna()

# Equal weights
weights_eq = np.array([1/3, 1/3, 1/3])

# Volatility weights (inverse of std dev)
vols = daily_returns.std()
weights_vol = 1 / vols
weights_vol /= weights_vol.sum()

# Portfolio daily returns
port_ret_eq = daily_returns @ weights_eq
port_ret_vol = daily_returns @ weights_vol

# Metrics
def stats(port_ret):
    mean = port_ret.mean()
    std = port_ret.std()
    sharpe = mean / std * np.sqrt(252)  # annualized Sharpe ratio
    return mean, std, sharpe

mean_eq, std_eq, sharpe_eq = stats(port_ret_eq)
mean_vol, std_vol, sharpe_vol = stats(port_ret_vol)

print("Equal-weight portfolio:")
print(f"Mean return: {mean_eq:.4f}, Std dev: {std_eq:.4f}, Sharpe ratio: {sharpe_eq:.2f}")

print("\nVolatility-weighted portfolio:")
print(f"Mean return: {mean_vol:.4f}, Std dev: {std_vol:.4f}, Sharpe ratio: {sharpe_vol:.2f}")